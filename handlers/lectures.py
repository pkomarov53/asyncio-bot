import os
import logging
import aiosqlite
from aiogram import types, Router
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext

from config import main_menu
from states.booking_state import BookingState
from utils.file_utils import get_file_base_names, get_buttons, read_lines_async

router = Router()

@router.message(lambda message: message.text == "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏")
async def available_lectures_menu(message: types.Message, state: FSMContext) -> None:
    """
    –í—ã–≤–æ–¥ –º–µ–Ω—é —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –ª–µ–∫—Ü–∏–π.
    """
    logging.info(f"User {message.from_user.id} accessed Available Lectures menu.")
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–π:", reply_markup=get_buttons("lections", (".txt",)))
    await state.set_state(BookingState.waiting_for_direction)

@router.message(lambda message: message.text in get_file_base_names("lections", (".txt",)))
async def show_lectures(message: types.Message, state: FSMContext) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–µ–∫—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    direction = message.text
    lection_file = os.path.join("lections", f"{direction}.txt")
    logging.info(f"Opening file for direction '{direction}': {lection_file}")

    if os.path.exists(lection_file):
        lectures = await read_lines_async(lection_file)
        async with aiosqlite.connect("database/bot_database.database") as conn:
            async with conn.execute("SELECT lecture FROM bookings WHERE direction = ?", (direction,)) as cursor:
                rows = await cursor.fetchall()
                booked_lectures = {row[0] for row in rows}

        await state.update_data(direction=direction)
        lecture_list = ""
        for i, lecture in enumerate(lectures):
            status = "üî¥" if lecture in booked_lectures else "üü¢"
            lecture_list += f"{status} {i + 1}. {lecture}\n\n"

        await message.answer(
            f"üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏* _{direction}_:\n\n{lecture_list}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–µ–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.",
            parse_mode="Markdown"
        )
        await state.set_state(BookingState.waiting_for_lecture)
    else:
        await message.answer(f"‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{direction}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

@router.message(lambda msg: msg.text.isdigit())
async def book_lecture(msg: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–µ–∫—Ü–∏–∏.
    """
    user_data = await state.get_data()
    direction = user_data.get('direction')
    if not direction:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    lection_file = os.path.join("lections", f"{direction}.txt")
    if not os.path.exists(lection_file):
        await msg.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    lectures = await read_lines_async(lection_file)
    lecture_number = int(msg.text)
    if not (1 <= lecture_number <= len(lectures)):
        await msg.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ª–µ–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    selected_lecture = lectures[lecture_number - 1]
    async with aiosqlite.connect("database/bot_database.database") as conn:
        async with conn.execute(
                "SELECT lecture FROM bookings WHERE direction = ? AND lecture = ?",
                (direction, selected_lecture)
        ) as cursor:
            if await cursor.fetchone():
                await msg.answer(f"‚ö†Ô∏è –õ–µ–∫—Ü–∏—è *'{selected_lecture}'* —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞.", parse_mode="Markdown")
                return

        await conn.execute(
            "INSERT INTO bookings (user_id, lecture, direction) VALUES (?, ?, ?)",
            (msg.from_user.id, selected_lecture, direction)
        )
        await conn.commit()
        logging.info(f"User {msg.from_user.id} booked lecture: {selected_lecture} ({direction})")
        await msg.answer(f"‚úÖ –õ–µ–∫—Ü–∏—è *'{selected_lecture}'* —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!", parse_mode="Markdown")
        await state.clear()

@router.message(StateFilter(None), lambda message: message.text == "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
@router.message(lambda message: message.text == "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")  # –í aiogram 3.x –ª—É—á—à–µ —Ç–∞–∫
async def return_to_menu(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é. –û—á–∏—â–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await state.clear()  # –û–±–Ω—É–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    logging.info(f"User {message.from_user.id} returned to main menu.")
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=main_menu)