import asyncio
import sqlite3
import os
import logging
from aiogram import Bot, Dispatcher, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.filters import Command


class BookingState(StatesGroup):
    waiting_for_direction = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    waiting_for_lecture = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –ª–µ–∫—Ü–∏–∏

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Bot token (replace with your actual token)
TOKEN = "7698217701:AAFDiwGxJ1Mrzx10UV8sMn43QxayoUgwA8g"

# Initialize bot and dispatcher
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()

dp.include_router(router)

# Database setup
def init_db():
    os.makedirs("db", exist_ok=True)
    conn = sqlite3.connect("db/bot_database.db")
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            telegram_id INTEGER UNIQUE,
            nickname TEXT
        )
    """)
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS bookings (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            lecture TEXT,
            direction TEXT,
            FOREIGN KEY(user_id) REFERENCES users(telegram_id)
        )
    """)
    conn.commit()
    conn.close()
    logging.info("Database initialized successfully.")


# Keyboard setup
main_menu = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="üìö –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–∏–≥–∏")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        [KeyboardButton(text="üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏")],
        [KeyboardButton(text="üìñ –ú–æ–∏ –ª–µ–∫—Ü–∏–∏")],
        [KeyboardButton(text="üîñ –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–µ–∫—Ü–∏–∏")]
    ]
)

# Start command handler
@router.message(Command("start"))
async def start(message: types.Message):
    telegram_id = message.from_user.id
    nickname = message.from_user.username or message.from_user.full_name
    logging.info(f"User @{nickname} (ID: {telegram_id}) started the bot.")

    conn = sqlite3.connect("db/bot_database.db")
    cursor = conn.cursor()
    cursor.execute("INSERT OR IGNORE INTO users (telegram_id, nickname) VALUES (?, ?)", (telegram_id, nickname))
    conn.commit()
    conn.close()

    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, @{nickname}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç-–æ—Ç–¥–µ–ª–∞!", reply_markup=main_menu)

# Book Links Menu
def get_book_buttons():
    books_folder = "books"
    os.makedirs(books_folder, exist_ok=True)

    book_files = [f for f in os.listdir(books_folder) if f.endswith(".txt")]
    keyboard = [[KeyboardButton(text=book.replace(".txt", ""))] for book in book_files]
    keyboard.append([KeyboardButton(text="üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")])

    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=keyboard)

@router.message(lambda message: message.text == "üìö –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–∏–≥–∏")
async def book_links_menu(message: types.Message):
    logging.info(f"User {message.from_user.id} accessed Book Links menu.")
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=get_book_buttons())

@router.message(lambda message: message.text in [f.replace(".txt", "") for f in os.listdir("books") if f.endswith(".txt")])
async def send_book_link(message: types.Message):
    books_folder = "books"
    book_file = os.path.join(books_folder, f"{message.text}.txt")

    if os.path.exists(book_file):
        with open(book_file, "r") as file:
            book_link = file.read().strip()
        logging.info(f"User {message.from_user.id} requested book: {message.text}")
        await message.answer(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É: https://{book_link}")

# Useful Information Menu
def get_info_buttons():
    info_folder = "useful_info"
    os.makedirs(info_folder, exist_ok=True)

    info_files = [f for f in os.listdir(info_folder) if f.endswith(".txt") or f.endswith(".pdf")]
    keyboard = [[KeyboardButton(text=file.replace(".txt", "").replace(".pdf", ""))] for file in info_files]
    keyboard.append([KeyboardButton(text="üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")])

    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=keyboard)

@router.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def useful_info_menu(message: types.Message):
    logging.info(f"User {message.from_user.id} accessed Useful Information menu.")
    await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:", reply_markup=get_info_buttons())

@router.message(lambda message: message.text in [f.replace(".txt", "").replace(".pdf", "") for f in os.listdir("useful_info") if f.endswith(".txt") or f.endswith(".pdf")])
async def send_useful_info(message: types.Message):
    info_folder = "useful_info"
    txt_file = os.path.join(info_folder, f"{message.text}.txt")
    pdf_file = os.path.join(info_folder, f"{message.text}.pdf")

    if os.path.exists(txt_file):
        with open(txt_file, "r", encoding="utf-8") as file:
            info_text = file.read().strip()
        logging.info(f"User {message.from_user.id} requested info: {message.text}")
        await message.answer(info_text)
    elif os.path.exists(pdf_file):
        logging.info(f"User {message.from_user.id} requested PDF: {message.text}")
        await message.answer_document(FSInputFile(pdf_file))

# Available Lectures Menu
def get_lecture_directions():
    lections_folder = "lections"
    os.makedirs(lections_folder, exist_ok=True)

    directions = [f.replace(".txt", "") for f in os.listdir(lections_folder) if f.endswith(".txt")]
    keyboard = [[KeyboardButton(text=direction)] for direction in directions]
    keyboard.append([KeyboardButton(text="üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")])

    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=keyboard)


@router.message(lambda message: message.text == "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏")
async def available_lectures_menu(message: types.Message, state: FSMContext):
    logging.info(f"User {message.from_user.id} accessed Available Lectures menu.")
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–π:", reply_markup=get_lecture_directions())
    await BookingState.waiting_for_direction.set()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è


@router.message(lambda message: message.text == "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏")
async def available_lectures_menu(message: types.Message, state: FSMContext):
    logging.info(f"User {message.from_user.id} accessed Available Lectures menu.")
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–π:", reply_markup=get_lecture_directions())
    await state.set_state(BookingState.waiting_for_direction)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤—ã–±–æ—Ä–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è

@router.message(lambda message: message.text in [f.replace(".txt", "") for f in os.listdir("lections") if f.endswith(".txt")])
async def show_lectures(message: types.Message, state: FSMContext):
    direction = message.text
    lections_folder = "lections"
    lection_file = os.path.join(lections_folder, f"{direction}.txt")

    # –õ–æ–≥–∏—Ä—É–µ–º –ø—É—Ç—å –∫ –æ—Ç–∫—Ä—ã–≤–∞–µ–º–æ–º—É —Ñ–∞–π–ª—É
    logging.info(f"Opening file for direction '{direction}': {lection_file}")

    if os.path.exists(lection_file):
        with open(lection_file, "r", encoding="utf-8") as file:
            lectures = [line.strip() for line in file.readlines() if line.strip()]

        conn = sqlite3.connect("db/bot_database.db")
        cursor = conn.cursor()
        cursor.execute("SELECT lecture FROM bookings WHERE direction = ?", (direction,))
        booked_lectures = {row[0] for row in cursor.fetchall()}
        conn.close()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(direction=direction)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        lecture_list = ""
        for i, lecture in enumerate(lectures):
            if lecture in booked_lectures:
                lecture_list += f"‚ùå {i + 1}. {lecture}\n"  # –ï—Å–ª–∏ –ª–µ–∫—Ü–∏—è –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞
            else:
                lecture_list += f"üìå {i + 1}. {lecture}\n"  # –ï—Å–ª–∏ –ª–µ–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–µ–∫—Ü–∏—è–º–∏
        await message.answer(
            f"üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏* _{direction}_:\n\n{lecture_list}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–µ–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.",
            parse_mode="Markdown")

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–º–µ—Ä–∞ –ª–µ–∫—Ü–∏–∏
        await state.set_state(BookingState.waiting_for_lecture)

    else:
        await message.answer(f"‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{direction}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@router.message(lambda msg: msg.text.isdigit())
async def book_lecture(msg: types.Message, state: FSMContext):
    user_data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    direction = user_data.get('direction')  # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è

    if direction:
        lections_folder = "lections"
        lection_file = os.path.join(lections_folder, f"{direction}.txt")

        if os.path.exists(lection_file):
            with open(lection_file, "r", encoding="utf-8") as file:
                lectures = [line.strip() for line in file.readlines() if line.strip()]

            lecture_number = int(msg.text)
            if 1 <= lecture_number <= len(lectures):
                selected_lecture = lectures[lecture_number - 1]

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ –ª–µ–∫—Ü–∏—è
                conn = sqlite3.connect("db/bot_database.db")
                cursor = conn.cursor()
                cursor.execute("SELECT lecture FROM bookings WHERE direction = ? AND lecture = ?",
                               (direction, selected_lecture))
                if cursor.fetchone():  # –õ–µ–∫—Ü–∏—è —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞
                    await msg.answer(f"‚ö†Ô∏è –õ–µ–∫—Ü–∏—è *'{selected_lecture}'* —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
                else:
                    # –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–∏
                    cursor.execute("INSERT INTO bookings (user_id, lecture, direction) VALUES (?, ?, ?)",
                                   (msg.from_user.id, selected_lecture, direction))
                    conn.commit()
                    conn.close()

                    logging.info(f"User {msg.from_user.id} booked lecture: {selected_lecture} ({direction})")
                    await msg.answer(f"‚úÖ –õ–µ–∫—Ü–∏—è *'{selected_lecture}'* —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!", parse_mode="Markdown")

                    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                    await state.finish()

            else:
                await msg.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ª–µ–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    else:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")

@router.message(lambda message: message.text == "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
async def return_to_menu(message: types.Message):
    logging.info(f"User {message.from_user.id} returned to main menu.")
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=main_menu)

# Run bot
async def main():
    logging.info("Bot is starting...")
    init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
