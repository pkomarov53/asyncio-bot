import asyncio
import os
import logging
import aiosqlite
from aiogram import Bot, Dispatcher, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

TOKEN = "TOKEN"

bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–µ–∫—Ü–∏–π
class BookingState(StatesGroup):
    waiting_for_direction = State()
    waiting_for_lecture = State()


async def init_db() -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü.
    """
    os.makedirs("db", exist_ok=True)
    async with aiosqlite.connect("db/bot_database.db") as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE,
                nickname TEXT
            )
        """)
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS bookings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                lecture TEXT,
                direction TEXT,
                FOREIGN KEY(user_id) REFERENCES users(telegram_id)
            )
        """)
        await conn.commit()
    logging.info("Database initialized successfully.")


def get_buttons(folder: str, extensions: tuple) -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏, –∏–º–µ–Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ —Å –Ω—É–∂–Ω—ã–º–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏.
    """
    os.makedirs(folder, exist_ok=True)
    files = [f for f in os.listdir(folder) if f.endswith(extensions)]
    keyboard = [[KeyboardButton(text=os.path.splitext(f)[0])] for f in files]
    keyboard.append([KeyboardButton(text="üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=keyboard)


def read_file_content(file_path: str, encoding: str = "utf-8") -> str:
    """
    –ß–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
    """
    with open(file_path, "r", encoding=encoding) as file:
        return file.read().strip()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
main_menu = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="üìö –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–∏–≥–∏")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        [KeyboardButton(text="üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏")],
        [KeyboardButton(text="üìñ –ú–æ–∏ –ª–µ–∫—Ü–∏–∏")]
    ]
)


@router.message(Command("start"))
async def start(message: types.Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –∏ –≤—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    telegram_id = message.from_user.id
    nickname = message.from_user.username or message.from_user.full_name
    logging.info(f"User @{nickname} (ID: {telegram_id}) started the bot.")
    async with aiosqlite.connect("db/bot_database.db") as conn:
        await conn.execute(
            "INSERT OR IGNORE INTO users (telegram_id, nickname) VALUES (?, ?)",
            (telegram_id, nickname)
        )
        await conn.commit()
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, @{nickname}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç-–æ—Ç–¥–µ–ª–∞!", reply_markup=main_menu)


@router.message(lambda message: message.text == "üìö –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–∏–≥–∏")
async def book_links_menu(message: types.Message) -> None:
    """
    –í—ã–≤–æ–¥ –º–µ–Ω—é —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∫–Ω–∏–≥.
    """
    logging.info(f"User {message.from_user.id} accessed Book Links menu.")
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=get_buttons("books", (".txt",)))


@router.message(
    lambda message: message.text in [os.path.splitext(f)[0] for f in os.listdir("books") if f.endswith(".txt")])
async def send_book_link(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–∏–≥—É, –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω.
    """
    book_file = os.path.join("books", f"{message.text}.txt")
    if os.path.exists(book_file):
        book_link = read_file_content(book_file)
        logging.info(f"User {message.from_user.id} requested book: {message.text}")
        await message.answer(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É: https://{book_link}")


@router.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def useful_info_menu(message: types.Message) -> None:
    """
    –í—ã–≤–æ–¥ –º–µ–Ω—é —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    """
    logging.info(f"User {message.from_user.id} accessed Useful Information menu.")
    await message.answer(
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=get_buttons("useful_info", (".txt", ".pdf"))
    )


@router.message(lambda message: message.text in [os.path.splitext(f)[0] for f in os.listdir("useful_info") if
                                                 f.endswith(".txt") or f.endswith(".pdf")])
async def send_useful_info(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: —Ç–µ–∫—Å—Ç –∏–ª–∏ PDF –¥–æ–∫—É–º–µ–Ω—Ç.
    """
    info_folder = "useful_info"
    txt_file = os.path.join(info_folder, f"{message.text}.txt")
    pdf_file = os.path.join(info_folder, f"{message.text}.pdf")

    if os.path.exists(txt_file):
        info_text = read_file_content(txt_file)
        logging.info(f"User {message.from_user.id} requested info: {message.text}")
        await message.answer(info_text)
    elif os.path.exists(pdf_file):
        logging.info(f"User {message.from_user.id} requested PDF: {message.text}")
        await message.answer_document(FSInputFile(pdf_file))


@router.message(lambda message: message.text == "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏")
async def available_lectures_menu(message: types.Message, state: FSMContext) -> None:
    """
    –í—ã–≤–æ–¥ –º–µ–Ω—é —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –ª–µ–∫—Ü–∏—è–º–∏ –ø–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—é.
    """
    logging.info(f"User {message.from_user.id} accessed Available Lectures menu.")
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–π:", reply_markup=get_buttons("lections", (".txt",)))
    await state.set_state(BookingState.waiting_for_direction)


@router.message(
    lambda message: message.text in [os.path.splitext(f)[0] for f in os.listdir("lections") if f.endswith(".txt")])
async def show_lectures(message: types.Message, state: FSMContext) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–µ–∫—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    direction = message.text
    lection_file = os.path.join("lections", f"{direction}.txt")
    logging.info(f"Opening file for direction '{direction}': {lection_file}")

    if os.path.exists(lection_file):
        with open(lection_file, "r", encoding="utf-8") as file:
            lectures = [line.strip() for line in file if line.strip()]

        async with aiosqlite.connect("db/bot_database.db") as conn:
            async with conn.execute("SELECT lecture FROM bookings WHERE direction = ?", (direction,)) as cursor:
                rows = await cursor.fetchall()
                booked_lectures = {row[0] for row in rows}

        await state.update_data(direction=direction)

        lecture_list = ""
        for i, lecture in enumerate(lectures):
            status = "üî¥" if lecture in booked_lectures else "üü¢"
            lecture_list += f"{status} {i + 1}. {lecture}\n\n"

        await message.answer(
            f"üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏* _{direction}_:\n\n{lecture_list}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–µ–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.",
            parse_mode="Markdown"
        )
        await state.set_state(BookingState.waiting_for_lecture)
    else:
        await message.answer(f"‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{direction}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@router.message(lambda msg: msg.text.isdigit())
async def book_lecture(msg: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–µ–∫—Ü–∏–∏.
    """
    user_data = await state.get_data()
    direction = user_data.get('direction')
    if not direction:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    lection_file = os.path.join("lections", f"{direction}.txt")
    if not os.path.exists(lection_file):
        await msg.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    with open(lection_file, "r", encoding="utf-8") as file:
        lectures = [line.strip() for line in file if line.strip()]

    lecture_number = int(msg.text)
    if not (1 <= lecture_number <= len(lectures)):
        await msg.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ª–µ–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    selected_lecture = lectures[lecture_number - 1]
    async with aiosqlite.connect("db/bot_database.db") as conn:
        async with conn.execute(
                "SELECT lecture FROM bookings WHERE direction = ? AND lecture = ?",
                (direction, selected_lecture)
        ) as cursor:
            if await cursor.fetchone():
                await msg.answer(f"‚ö†Ô∏è –õ–µ–∫—Ü–∏—è *'{selected_lecture}'* —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞.", parse_mode="Markdown")
                return

        await conn.execute(
            "INSERT INTO bookings (user_id, lecture, direction) VALUES (?, ?, ?)",
            (msg.from_user.id, selected_lecture, direction)
        )
        await conn.commit()
        logging.info(f"User {msg.from_user.id} booked lecture: {selected_lecture} ({direction})")
        await msg.answer(f"‚úÖ –õ–µ–∫—Ü–∏—è *'{selected_lecture}'* —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!", parse_mode="Markdown")
        await state.clear()


@router.message(lambda message: message.text == "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
async def return_to_menu(message: types.Message) -> None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    logging.info(f"User {message.from_user.id} returned to main menu.")
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=main_menu)


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    logging.info("Bot is starting...")
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
