import asyncio
import os
import logging
from pathlib import Path
from functools import lru_cache

import aiosqlite
import aiofiles
from aiogram import Bot, Dispatcher, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)
from aiogram.filters import Command

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = ""

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ø—É—Ç–µ–π
BASE_DIR = Path(__file__).parent
DB_DIR = BASE_DIR / "db"
DB_PATH = DB_DIR / "bot_database.db"
BOOKS_DIR = BASE_DIR / "books"
USEFUL_INFO_DIR = BASE_DIR / "useful_info"
LECTIONS_DIR = BASE_DIR / "lections"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞, –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –∏ —Ä–æ—É—Ç–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()
dp.include_router(router)


# –°–æ—Å—Ç–æ—è–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–µ–∫—Ü–∏–π
class BookingState(StatesGroup):
    waiting_for_direction = State()
    waiting_for_lecture = State()


async def init_db() -> None:
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ç–∞–±–ª–∏—Ü.
    """
    DB_DIR.mkdir(exist_ok=True)
    async with aiosqlite.connect(str(DB_PATH)) as conn:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                telegram_id INTEGER UNIQUE,
                nickname TEXT
            )
        """)
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS bookings (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                lecture TEXT,
                direction TEXT,
                FOREIGN KEY(user_id) REFERENCES users(telegram_id)
            )
        """)
        await conn.commit()
    logger.info("Database initialized successfully.")


@lru_cache(maxsize=None)
def get_file_base_names(folder: Path, extensions: tuple) -> list:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π) –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.
    """
    folder.mkdir(exist_ok=True)
    return [file.stem for file in folder.iterdir() if file.suffix in extensions]


def get_buttons(folder: Path, extensions: tuple) -> ReplyKeyboardMarkup:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏.
    """
    base_names = get_file_base_names(folder, extensions)
    buttons = [[KeyboardButton(text=name)] for name in base_names]
    buttons.append([KeyboardButton(text="üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)


async def read_file_content_async(file_path: Path, encoding: str = "utf-8") -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.
    """
    async with aiofiles.open(file_path, "r", encoding=encoding) as file:
        content = await file.read()
    return content.strip()


async def read_lines_async(file_path: Path, encoding: str = "utf-8") -> list:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞—è –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.
    """
    content = await read_file_content_async(file_path, encoding)
    return [line.strip() for line in content.splitlines() if line.strip()]


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
main_menu = ReplyKeyboardMarkup(
    resize_keyboard=True,
    keyboard=[
        [KeyboardButton(text="üìö –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–∏–≥–∏")],
        [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
        [KeyboardButton(text="üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏")],
        [KeyboardButton(text="üìñ –ú–æ–∏ –ª–µ–∫—Ü–∏–∏")]
    ]
)


@router.message(Command("start"))
async def start(message: types.Message) -> None:
    """
    –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î –∏ –≤—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
    """
    telegram_id = message.from_user.id
    nickname = message.from_user.username or message.from_user.full_name
    logger.info("User @%s (ID: %s) started the bot.", nickname, telegram_id)
    async with aiosqlite.connect(str(DB_PATH)) as conn:
        await conn.execute(
            "INSERT OR IGNORE INTO users (telegram_id, nickname) VALUES (?, ?)",
            (telegram_id, nickname)
        )
        await conn.commit()
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, @{nickname}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç-–æ—Ç–¥–µ–ª–∞!",
        reply_markup=main_menu
    )


@router.message(lambda message: message.text == "üìö –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–∏–≥–∏")
async def book_links_menu(message: types.Message) -> None:
    """
    –í—ã–≤–æ–¥ –º–µ–Ω—é —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∫–Ω–∏–≥.
    """
    logger.info("User %s accessed Book Links menu.", message.from_user.id)
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=get_buttons(BOOKS_DIR, (".txt",)))


@router.message(lambda message: message.text in get_file_base_names(BOOKS_DIR, (".txt",)))
async def send_book_link(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–∏–≥—É.
    """
    book_file = BOOKS_DIR / f"{message.text}.txt"
    if book_file.exists():
        book_link = await read_file_content_async(book_file)
        logger.info("User %s requested book: %s", message.from_user.id, message.text)
        await message.answer(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É: https://{book_link}")
    else:
        await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@router.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def useful_info_menu(message: types.Message) -> None:
    """
    –í—ã–≤–æ–¥ –º–µ–Ω—é —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π.
    """
    logger.info("User %s accessed Useful Information menu.", message.from_user.id)
    await message.answer(
        "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:",
        reply_markup=get_buttons(USEFUL_INFO_DIR, (".txt", ".pdf"))
    )


@router.message(lambda message: message.text in get_file_base_names(USEFUL_INFO_DIR, (".txt", ".pdf")))
async def send_useful_info(message: types.Message) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: —Ç–µ–∫—Å—Ç –∏–ª–∏ PDF.
    """
    info_txt = USEFUL_INFO_DIR / f"{message.text}.txt"
    info_pdf = USEFUL_INFO_DIR / f"{message.text}.pdf"
    if info_txt.exists():
        info_text = await read_file_content_async(info_txt)
        logger.info("User %s requested info: %s", message.from_user.id, message.text)
        await message.answer(info_text)
    elif info_pdf.exists():
        logger.info("User %s requested PDF: %s", message.from_user.id, message.text)
        await message.answer_document(FSInputFile(str(info_pdf)))
    else:
        await message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


@router.message(lambda message: message.text == "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏")
async def available_lectures_menu(message: types.Message, state: FSMContext) -> None:
    """
    –í—ã–≤–æ–¥ –º–µ–Ω—é —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –ª–µ–∫—Ü–∏–π.
    """
    logger.info("User %s accessed Available Lectures menu.", message.from_user.id)
    await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–π:", reply_markup=get_buttons(LECTIONS_DIR, (".txt",)))
    await state.set_state(BookingState.waiting_for_direction)


@router.message(lambda message: message.text in get_file_base_names(LECTIONS_DIR, (".txt",)))
async def show_lectures(message: types.Message, state: FSMContext) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ª–µ–∫—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    direction = message.text
    lection_file = LECTIONS_DIR / f"{direction}.txt"
    logger.info("Opening file for direction '%s': %s", direction, lection_file)
    if lection_file.exists():
        lectures = await read_lines_async(lection_file)
        async with aiosqlite.connect(str(DB_PATH)) as conn:
            async with conn.execute("SELECT lecture FROM bookings WHERE direction = ?", (direction,)) as cursor:
                rows = await cursor.fetchall()
                booked_lectures = {row[0] for row in rows}
        await state.update_data(direction=direction)
        lecture_list = "\n\n".join(
            f"{'üî¥' if lecture in booked_lectures else 'üü¢'} {idx}. {lecture}"
            for idx, lecture in enumerate(lectures, start=1)
        )
        await message.answer(
            f"üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏* _{direction}_:\n\n{lecture_list}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–µ–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.",
            parse_mode="Markdown"
        )
        await state.set_state(BookingState.waiting_for_lecture)
    else:
        await message.answer(f"‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{direction}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@router.message(lambda msg: msg.text.isdigit())
async def book_lecture(msg: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ª–µ–∫—Ü–∏–∏.
    """
    user_data = await state.get_data()
    direction = user_data.get('direction')
    if not direction:
        await msg.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return

    lection_file = LECTIONS_DIR / f"{direction}.txt"
    if not lection_file.exists():
        await msg.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    lectures = await read_lines_async(lection_file)
    lecture_number = int(msg.text)
    if not (1 <= lecture_number <= len(lectures)):
        await msg.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ª–µ–∫—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    selected_lecture = lectures[lecture_number - 1]
    async with aiosqlite.connect(str(DB_PATH)) as conn:
        async with conn.execute(
            "SELECT lecture FROM bookings WHERE direction = ? AND lecture = ?",
            (direction, selected_lecture)
        ) as cursor:
            if await cursor.fetchone():
                await msg.answer(
                    f"‚ö†Ô∏è –õ–µ–∫—Ü–∏—è *'{selected_lecture}'* —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞.",
                    parse_mode="Markdown"
                )
                return

        await conn.execute(
            "INSERT INTO bookings (user_id, lecture, direction) VALUES (?, ?, ?)",
            (msg.from_user.id, selected_lecture, direction)
        )
        await conn.commit()
    logger.info("User %s booked lecture: %s (%s)", msg.from_user.id, selected_lecture, direction)
    await msg.answer(f"‚úÖ –õ–µ–∫—Ü–∏—è *'{selected_lecture}'* —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!", parse_mode="Markdown")
    await state.clear()


@router.message(lambda message: message.text == "üìñ –ú–æ–∏ –ª–µ–∫—Ü–∏–∏")
async def my_lectures(message: types.Message) -> None:
    """
    –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–µ–∫—Ü–∏–π —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏.
    """
    user_id = message.from_user.id
    async with aiosqlite.connect(str(DB_PATH)) as conn:
        async with conn.execute(
            "SELECT id, lecture, direction FROM bookings WHERE user_id = ?",
            (user_id,)
        ) as cursor:
            rows = await cursor.fetchall()

    if not rows:
        await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–µ–∫—Ü–∏–π.")
        return

    text = "üìñ *–í–∞—à–∏ –ª–µ–∫—Ü–∏–∏:*\n\n"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    for i, (lecture_id, lecture, direction) in enumerate(rows, start=1):
        text += f"üìå *{i}. {lecture}* ({direction})\n\n"
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(text=f"‚úî –ó–∞–≤–µ—Ä—à–∏—Ç—å {i}", callback_data=f"complete:{lecture_id}"),
            InlineKeyboardButton(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {i}", callback_data=f"cancel:{lecture_id}")
        ])

    await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)


@router.callback_query(lambda call: call.data.startswith(("complete:", "cancel:")))
async def manage_lecture_callback(call: CallbackQuery) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –ª–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏.
    """
    user_id = call.from_user.id
    action, lecture_id = call.data.split(":", 1)
    async with aiosqlite.connect(str(DB_PATH)) as conn:
        async with conn.execute(
            "SELECT lecture FROM bookings WHERE id = ? AND user_id = ?",
            (lecture_id, user_id)
        ) as cursor:
            row = await cursor.fetchone()
            if not row:
                await call.answer("‚ö† –õ–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
                return
            lecture_name = row[0]
        await conn.execute("DELETE FROM bookings WHERE id = ? AND user_id = ?", (lecture_id, user_id))
        await conn.commit()

    if action == "complete":
        await call.message.edit_text(
            f"‚úÖ –õ–µ–∫—Ü–∏—è *'{lecture_name}'* –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", parse_mode="Markdown"
        )
    else:
        await call.message.edit_text(
            f"üîÑ –õ–µ–∫—Ü–∏—è *'{lecture_name}'* –æ—Ç–º–µ–Ω–µ–Ω–∞.", parse_mode="Markdown"
        )

    await call.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")


@router.message(lambda message: message.text == "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
async def return_to_menu(message: types.Message) -> None:
    """
    –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    logger.info("User %s returned to main menu.", message.from_user.id)
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=main_menu)


async def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    logger.info("Bot is starting...")
    await init_db()
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
