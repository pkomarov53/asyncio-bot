import asyncio
import logging
import os
from pathlib import Path
from functools import lru_cache
from typing import List, Tuple, AsyncIterator, Any

import aiosqlite
import aiofiles
from aiogram import Bot, Dispatcher, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import (
    ReplyKeyboardMarkup,
    KeyboardButton,
    FSInputFile,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    CallbackQuery,
)
from aiogram.filters import Command, BaseFilter
from contextlib import asynccontextmanager

# =======================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =======================
class Config:
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç.
    """
    BOT_TOKEN: str = os.getenv("BOT_TOKEN", "")
    BASE_DIR: Path = Path(__file__).parent
    DB_DIR: Path = BASE_DIR / "db"
    DB_PATH: Path = DB_DIR / "bot_database.db"
    BOOKS_DIR: Path = BASE_DIR / "books"
    USEFUL_INFO_DIR: Path = BASE_DIR / "useful_info"
    LECTIONS_DIR: Path = BASE_DIR / "lections"
    SPECIAL_USERS: List[int] = [473516172, 380771755]
    DB_POOL_SIZE: int = 5

# =======================
# –ú–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
# =======================
class DatabaseManager:
    """
    –ú–µ–Ω–µ–¥–∂–µ—Ä –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    """
    def __init__(self, db_path: Path, pool_size: int = 5) -> None:
        self.db_path = db_path
        self.pool_size = pool_size
        self.pool: asyncio.Queue[aiosqlite.Connection] = asyncio.Queue(maxsize=pool_size)

    async def init_pool(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π.
        """
        for _ in range(self.pool_size):
            conn = await aiosqlite.connect(str(self.db_path))
            conn.row_factory = aiosqlite.Row
            await self.pool.put(conn)
        logging.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (—Ä–∞–∑–º–µ—Ä %d)", self.pool_size)

    async def close_pool(self) -> None:
        """
        –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –≤ –ø—É–ª–µ.
        """
        while not self.pool.empty():
            conn = await self.pool.get()
            await conn.close()
        logging.info("–ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∑–∞–∫—Ä—ã—Ç.")

    async def acquire(self) -> aiosqlite.Connection:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞.
        """
        return await self.pool.get()

    async def release(self, conn: aiosqlite.Connection) -> None:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—É–ª.
        """
        await self.pool.put(conn)

    @asynccontextmanager
    async def get_connection(self) -> AsyncIterator[aiosqlite.Connection]:
        """
        –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º –∏–∑ –ø—É–ª–∞.
        """
        conn = await self.acquire()
        try:
            yield conn
        except Exception as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ë–î: %s", e)
            raise
        finally:
            await self.release(conn)

# =======================
# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã
# =======================
class IsSpecialUser(BaseFilter):
    """
    –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
    """
    def __init__(self, special_users: List[int]) -> None:
        self.special_users = special_users

    async def __call__(self, message: types.Message) -> bool:
        return message.from_user.id in self.special_users

# =======================
# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
# =======================
async def read_file_content_async(file_path: Path, encoding: str = "utf-8") -> str:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–∏—Ç–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞.
    """
    async with aiofiles.open(file_path, "r", encoding=encoding) as file:
        content = await file.read()
    return content.strip()

async def read_lines_async(file_path: Path, encoding: str = "utf-8") -> List[str]:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–∏—Ç–∞–µ—Ç —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞, –≤–æ–∑–≤—Ä–∞—â–∞—è –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏.
    """
    content = await read_file_content_async(file_path, encoding)
    return [line.strip() for line in content.splitlines() if line.strip()]

async def remove_line_from_file(file_path: Path, line_to_remove: str, encoding: str = "utf-8") -> None:
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏–∑ —Ñ–∞–π–ª–∞.
    """
    lines = await read_lines_async(file_path, encoding)
    lines = [line for line in lines if line.strip() != line_to_remove.strip()]
    async with aiofiles.open(file_path, "w", encoding=encoding) as file:
        await file.write("\n".join(lines))

# =======================
# –ö–ª–∞—Å—Å –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä
# =======================
class KeyboardBuilder:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π.
    """
    @staticmethod
    @lru_cache(maxsize=None)
    def get_file_base_names(folder: Path, extensions: Tuple[str, ...]) -> List[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–π) –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏.
        """
        folder.mkdir(exist_ok=True)
        return sorted([file.stem for file in folder.iterdir() if file.suffix in extensions])

    @staticmethod
    def build_keyboard(folder: Path, extensions: Tuple[str, ...]) -> ReplyKeyboardMarkup:
        """
        –°—Ç—Ä–æ–∏—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º—ë–Ω —Ñ–∞–π–ª–æ–≤.
        """
        base_names = KeyboardBuilder.get_file_base_names(folder, extensions)
        buttons = [[KeyboardButton(text=name)] for name in base_names]
        buttons.append([KeyboardButton(text="üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")])
        return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)

    @staticmethod
    def main_menu(is_special: bool = False) -> ReplyKeyboardMarkup:
        """
        –°—Ç—Ä–æ–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        """
        buttons = [
            [KeyboardButton(text="üìö –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–∏–≥–∏")],
            [KeyboardButton(text="‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")],
            [KeyboardButton(text="üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏")],
            [KeyboardButton(text="üìñ –ú–æ–∏ –ª–µ–∫—Ü–∏–∏")]
        ]
        if is_special:
            buttons.append([KeyboardButton(text="üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")])
        return ReplyKeyboardMarkup(resize_keyboard=True, keyboard=buttons)

# =======================
# –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ (BotService)
# =======================
class BotService:
    """
    –ö–ª–∞—Å—Å, –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É—é—â–∏–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫—É –±–æ—Ç–∞.
    """
    def __init__(self, db_manager: DatabaseManager, config: Config) -> None:
        self.db_manager = db_manager
        self.config = config

    async def init_db(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã.
        """
        self.config.DB_DIR.mkdir(exist_ok=True)
        async with self.db_manager.get_connection() as conn:
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    telegram_id INTEGER UNIQUE,
                    nickname TEXT
                )
            """)
            await conn.execute("""
                CREATE TABLE IF NOT EXISTS bookings (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    user_id INTEGER,
                    lecture TEXT,
                    direction TEXT,
                    FOREIGN KEY(user_id) REFERENCES users(telegram_id)
                )
            """)
            await conn.commit()
        logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

    async def register_user(self, message: types.Message) -> None:
        """
        –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
        """
        telegram_id = message.from_user.id
        nickname = message.from_user.username or message.from_user.full_name
        async with self.db_manager.get_connection() as conn:
            await conn.execute(
                "INSERT OR IGNORE INTO users (telegram_id, nickname) VALUES (?, ?)",
                (telegram_id, nickname)
            )
            await conn.commit()
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @%s (ID: %s) –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", nickname, telegram_id)

    async def get_book_link(self, book_name: str) -> str:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–Ω–∏–≥—É –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ BOOKS_DIR.
        """
        book_file = self.config.BOOKS_DIR / f"{book_name}.txt"
        if book_file.exists():
            content = await read_file_content_async(book_file)
            return f"https://{content}"
        raise FileNotFoundError("–ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    async def get_useful_info(self, info_name: str) -> Tuple[str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂: (—Ç–∏–ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: "text" –∏–ª–∏ "pdf", —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏–ª–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É).
        """
        info_txt = self.config.USEFUL_INFO_DIR / f"{info_name}.txt"
        info_pdf = self.config.USEFUL_INFO_DIR / f"{info_name}.pdf"
        if info_txt.exists():
            content = await read_file_content_async(info_txt)
            return ("text", content)
        elif info_pdf.exists():
            return ("pdf", str(info_pdf))
        raise FileNotFoundError("–ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    async def get_available_lectures(self, direction: str) -> List[str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ª–µ–∫—Ü–∏–π –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        lection_file = self.config.LECTIONS_DIR / f"{direction}.txt"
        if not lection_file.exists():
            raise FileNotFoundError(f"–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{direction}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        lectures = await read_lines_async(lection_file)
        async with self.db_manager.get_connection() as conn:
            async with conn.execute("SELECT lecture FROM bookings WHERE direction = ?", (direction,)) as cursor:
                rows = await cursor.fetchall()
                booked_lectures = {row["lecture"] for row in rows}
        return [
            f"{'üî¥' if lecture in booked_lectures else 'üü¢'} {idx}. {lecture}"
            for idx, lecture in enumerate(lectures, start=1)
        ]

    async def book_lecture(self, user_id: int, direction: str, lecture_number: int) -> str:
        """
        –ë—Ä–æ–Ω–∏—Ä—É–µ—Ç –ª–µ–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        """
        lection_file = self.config.LECTIONS_DIR / f"{direction}.txt"
        if not lection_file.exists():
            raise FileNotFoundError("–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        lectures = await read_lines_async(lection_file)
        if not (1 <= lecture_number <= len(lectures)):
            raise ValueError("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –ª–µ–∫—Ü–∏–∏.")
        selected_lecture = lectures[lecture_number - 1]
        async with self.db_manager.get_connection() as conn:
            async with conn.execute(
                "SELECT lecture FROM bookings WHERE direction = ? AND lecture = ?",
                (direction, selected_lecture)
            ) as cursor:
                if await cursor.fetchone():
                    raise ValueError("–õ–µ–∫—Ü–∏—è —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞.")
            await conn.execute(
                "INSERT INTO bookings (user_id, lecture, direction) VALUES (?, ?, ?)",
                (user_id, selected_lecture, direction)
            )
            await conn.commit()
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª –ª–µ–∫—Ü–∏—é: %s (%s)", user_id, selected_lecture, direction)
        return selected_lecture

    async def get_user_lectures(self, user_id: int) -> List[aiosqlite.Row]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
        """
        async with self.db_manager.get_connection() as conn:
            async with conn.execute(
                "SELECT id, lecture, direction FROM bookings WHERE user_id = ?",
                (user_id,)
            ) as cursor:
                rows = await cursor.fetchall()
        return rows

    async def manage_lecture(self, user_id: int, lecture_id: int, action: str) -> Tuple[str, str]:
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–ª–∏ –æ—Ç–º–µ–Ω—è–µ—Ç –±—Ä–æ–Ω—å –ª–µ–∫—Ü–∏–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–∏.
        """
        async with self.db_manager.get_connection() as conn:
            async with conn.execute(
                "SELECT lecture, direction FROM bookings WHERE id = ? AND user_id = ?",
                (lecture_id, user_id)
            ) as cursor:
                row = await cursor.fetchone()
                if not row:
                    raise ValueError("–õ–µ–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                lecture_name, direction = row["lecture"], row["direction"]
            await conn.execute("DELETE FROM bookings WHERE id = ? AND user_id = ?", (lecture_id, user_id))
            await conn.commit()
        # –£–¥–∞–ª—è–µ–º –ª–µ–∫—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        lection_file = self.config.LECTIONS_DIR / f"{direction}.txt"
        if lection_file.exists():
            await remove_line_from_file(lection_file, lecture_name)
        result_message = (
            f"‚úÖ –õ–µ–∫—Ü–∏—è *'{lecture_name}'* –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" if action == "complete"
            else f"üîÑ –õ–µ–∫—Ü–∏—è *'{lecture_name}'* –æ—Ç–º–µ–Ω–µ–Ω–∞."
        )
        return result_message, lecture_name

# =======================
# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ª–µ–∫—Ü–∏–π
# =======================
class BookingState(StatesGroup):
    waiting_for_direction = State()
    waiting_for_lecture = State()

# =======================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
# =======================
router = Router()

def register_handlers(dp: Dispatcher, bot_service: BotService, config: Config) -> None:
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ —Ö–µ–Ω–¥–ª–µ—Ä—ã –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ.
    """
    @router.message(Command("start"))
    async def start_handler(message: types.Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start: —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–≤–æ–¥ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é.
        """
        await bot_service.register_user(message)
        is_special = message.from_user.id in config.SPECIAL_USERS
        menu = KeyboardBuilder.main_menu(is_special)
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, @{message.from_user.username or message.from_user.full_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç-–æ—Ç–¥–µ–ª–∞!",
            reply_markup=menu
        )

    @router.message(IsSpecialUser(config.SPECIAL_USERS))
    @router.message(lambda message: message.text == "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    async def admin_panel_handler(message: types.Message) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–µ–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.
        """
        async with bot_service.db_manager.get_connection() as conn:
            async with conn.execute(
                "SELECT users.nickname, bookings.lecture, bookings.direction FROM bookings JOIN users ON bookings.user_id = users.telegram_id"
            ) as cursor:
                rows = await cursor.fetchall()
        if not rows:
            await message.answer("üì≠ –ù–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–µ–∫—Ü–∏–π.")
            return
        text = "üìñ *–í—Å–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ª–µ–∫—Ü–∏–∏:*\n\n"
        for i, row in enumerate(rows, start=1):
            text += f"üë§ @{row['nickname']}: {row['lecture']} ({row['direction']})\n\n"
        await message.answer(text, parse_mode="Markdown")

    @router.message(lambda message: message.text == "üìö –°—Å—ã–ª–∫–∏ –Ω–∞ –∫–Ω–∏–≥–∏")
    async def book_links_handler(message: types.Message) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –∫–Ω–∏–≥.
        """
        keyboard = KeyboardBuilder.build_keyboard(config.BOOKS_DIR, (".txt",))
        await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:", reply_markup=keyboard)

    @router.message(lambda message: message.text in KeyboardBuilder.get_file_base_names(config.BOOKS_DIR, (".txt",)))
    async def send_book_link_handler(message: types.Message) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–∏–≥—É.
        """
        try:
            link = await bot_service.get_book_link(message.text)
            await message.answer(f"–í–æ—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—É: {link}")
        except FileNotFoundError:
            await message.answer("‚ùå –ö–Ω–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    @router.message(lambda message: message.text == "‚ÑπÔ∏è –ü–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
    async def useful_info_handler(message: types.Message) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.
        """
        keyboard = KeyboardBuilder.build_keyboard(config.USEFUL_INFO_DIR, (".txt", ".pdf"))
        await message.answer("–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:", reply_markup=keyboard)

    @router.message(lambda message: message.text in KeyboardBuilder.get_file_base_names(config.USEFUL_INFO_DIR, (".txt", ".pdf")))
    async def send_useful_info_handler(message: types.Message) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (—Ç–µ–∫—Å—Ç –∏–ª–∏ PDF).
        """
        try:
            info_type, content = await bot_service.get_useful_info(message.text)
            if info_type == "text":
                await message.answer(content)
            else:
                await message.answer_document(FSInputFile(content))
        except FileNotFoundError:
            await message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    @router.message(lambda message: message.text == "üìÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏")
    async def available_lectures_handler(message: types.Message, state: FSMContext) -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é —Å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –ª–µ–∫—Ü–∏–π.
        """
        keyboard = KeyboardBuilder.build_keyboard(config.LECTIONS_DIR, (".txt",))
        await message.answer("–í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–µ–∫—Ü–∏–π:", reply_markup=keyboard)
        await state.set_state(BookingState.waiting_for_direction)

    @router.message(lambda message: message.text in KeyboardBuilder.get_file_base_names(config.LECTIONS_DIR, (".txt",)))
    async def show_lectures_handler(message: types.Message, state: FSMContext) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è.
        """
        direction = message.text
        try:
            lectures = await bot_service.get_available_lectures(direction)
            await state.update_data(direction=direction)
            lecture_list = "\n\n".join(lectures)
            await message.answer(
                f"üìñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–µ–∫—Ü–∏–∏ –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏* _{direction}_:\n\n{lecture_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–µ–∫—Ü–∏–∏, —á—Ç–æ–±—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å.",
                parse_mode="Markdown"
            )
            await state.set_state(BookingState.waiting_for_lecture)
        except FileNotFoundError:
            await message.answer(f"‚ùå –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ '{direction}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    @router.message(lambda msg: msg.text.isdigit())
    async def book_lecture_handler(msg: types.Message, state: FSMContext) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–µ–∫—Ü–∏–∏.
        """
        user_data = await state.get_data()
        direction = user_data.get('direction')
        if not direction:
            await msg.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.")
            return
        try:
            lecture_number = int(msg.text)
            selected_lecture = await bot_service.book_lecture(msg.from_user.id, direction, lecture_number)
            await msg.answer(f"‚úÖ –õ–µ–∫—Ü–∏—è *'{selected_lecture}'* —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞!", parse_mode="Markdown")
            await state.clear()
        except (FileNotFoundError, ValueError) as e:
            await msg.answer(f"‚ö†Ô∏è {str(e)}")

    @router.message(lambda message: message.text == "üìñ –ú–æ–∏ –ª–µ–∫—Ü–∏–∏")
    async def my_lectures_handler(message: types.Message) -> None:
        """
        –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ª–µ–∫—Ü–∏–π, –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏.
        """
        lectures = await bot_service.get_user_lectures(message.from_user.id)
        if not lectures:
            await message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–µ–∫—Ü–∏–π.")
            return
        text = "üìñ *–í–∞—à–∏ –ª–µ–∫—Ü–∏–∏:*\n\n"
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for i, row in enumerate(lectures, start=1):
            text += f"üìå *{i}. {row['lecture']}* ({row['direction']})\n\n"
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text=f"‚úî –ó–∞–≤–µ—Ä—à–∏—Ç—å {i}", callback_data=f"complete:{row['id']}"),
                InlineKeyboardButton(text=f"‚ùå –û—Ç–º–µ–Ω–∏—Ç—å {i}", callback_data=f"cancel:{row['id']}")
            ])
        await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

    @router.callback_query(lambda call: call.data.startswith(("complete:", "cancel:")))
    async def manage_lecture_callback_handler(call: CallbackQuery) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–º–µ–Ω—É –ª–µ–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫–∏.
        """
        try:
            action, lecture_id_str = call.data.split(":", 1)
            lecture_id = int(lecture_id_str)
            result_message, _ = await bot_service.manage_lecture(call.from_user.id, lecture_id, action)
            await call.message.edit_text(result_message, parse_mode="Markdown")
            await call.answer("‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!")
        except (ValueError, Exception) as e:
            logging.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ª–µ–∫—Ü–∏–µ–π: %s", e)
            await call.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.", show_alert=True)

    @router.message(lambda message: message.text == "üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é")
    async def return_to_menu_handler(message: types.Message) -> None:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
        """
        is_special = message.from_user.id in config.SPECIAL_USERS
        menu = KeyboardBuilder.main_menu(is_special)
        await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...", reply_markup=menu)

    dp.include_router(router)

# =======================
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# =======================
async def main() -> None:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞.
    """
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    if not Config.BOT_TOKEN:
        logging.error("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∏ –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏
    config = Config
    db_manager = DatabaseManager(config.DB_PATH, config.DB_POOL_SIZE)
    await db_manager.init_pool()
    bot_service = BotService(db_manager, config)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=config.BOT_TOKEN)
    dp = Dispatcher()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await bot_service.init_db()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
    register_handlers(dp, bot_service, config)

    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    try:
        await dp.start_polling(bot)
    finally:
        await db_manager.close_pool()

if __name__ == "__main__":
    asyncio.run(main())
